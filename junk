Function ESPInstaller {
    param(
        [ValidateSet("Script","MSI","EXE")]$Type,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Title,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Version,
        [Parameter(ValueFromPipelineByPropertyName)][String]$SourcePath,
        [Parameter(ValueFromPipelineByPropertyName)][String]$InstallFile,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Arguments,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Validation,
        [Parameter(ValueFromPipelineByPropertyName)][ValidateSet('Continue','Stop')]$Behavior
    )

    [PSCustomObject]@{
        Type=$Type
        Title=$Title
        Version=$Version
        SourcePath=$SourcePath
        InstallFile=$InstallFile
        Arguments=$Arguments
        Validation=$Validation
        Behavior=$Behavior
    }
}

Function ESPIngest {
    param(
        [Parameter(ValueFromPipelineByPropertyName)][String]$Path
    )

    $Coll = [System.Collections.Generic.List[Object]]@()
    $Ingest = Import-Csv -Path $Path -UseCulture
    $Ingest | ForEach-Object {
        $Obj = $_ | ESPInstaller
        $Coll.Add($Obj)
        $Obj = $null
    }

    return $Coll
}

Function ESPLocalize {
    param(
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$CSVPath,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$OutputPath,
        [Parameter(ValueFromPipelineByPropertyName)][PSCredential]$Credential
        
    )

    if (!(Test-Path $OutputPath)) {New-Item -ItemType Directory -Path $OutputPath}
    $Ingest = ESPIngest -Path $CSVPath
    $Ingest | ForEach-Object {
        if ($Credential) {Copy-Item $_.SourcePath $OutputPath -Recurse -Container -Credential $Credential}
        else {Copy-Item $_.SourcePath $OutputPath -Recurse -Container}
    }
    Set-Variable -Name "ESPCondenserPath" -Value $OutputPath -Scope Global

}

Function ESPCondense {
    param(
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$CSVPath
    )
    $Ingest = ESPIngest -Path $CSVPath
    $Ingest | ForEach-Object {
        $Install = $_ | ESPInstallerType
        $InstallString = $InstallString + $Install
        $Install = $Null
    }
    $InstallString | Set-Content $ESPCondenserPath\Install.ps1
}

Function ESPInstallerType {
    param(
        [ValidateSet("Script","MSI","EXE")]$Type,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Title,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Version,
        [Parameter(ValueFromPipelineByPropertyName)][String]$SourcePath,
        [Parameter(ValueFromPipelineByPropertyName)][String]$InstallFile,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Arguments,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Validation,
        [Parameter(ValueFromPipelineByPropertyName)][ValidateSet('Continue','Stop')]$Behavior
    )

    $SourcePath = $SourcePath -replace "^(.*[\\\/])",""
    Switch($Type) {
        "MSI"   {$Process = "C:\Windows\System32\msiexec.exe /i `"$PSScriptRoot\$SourcePath\$InstallFile`""}
        "EXE"   {$Process = "$PSScriptRoot\$SourcePath\$InstallFile"}
        "Script"    {$Process = "C:\Windows\System32\powershell.exe -ExecutionPolicy Bypass -NoLogo -NoProfile -File `"$PSScriptRoot\$SourcePath\$InstallFile`""}
    }
    
$OutputStr = @"
###$($Title)
###$($Version)
`$Process = Start-Process "$Process" -Arguments "$Arguments" -Wait -Passthrough
if (`$Process.ExitCode -ne 0){
    if ("$Behavior" -eq "Stop") {
        Exit 1
    }
}
"@

Return $OutputStr
}
