Function ESPInstaller {
    param(
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][ValidateSet("Script","MSI","EXE")]$Type,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$Title,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Version,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$SourcePath,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$InstallFile,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Arguments,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Validation,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][ValidateSet('Continue','Stop')]$Behavior
    )

    [PSCustomObject]@{
        Type=$Type
        Title=$Title
        Version=$Version
        SourcePath=$SourcePath
        InstallFile=$InstallFile
        Arguments=$Arguments
        Validation=$Validation
        Behavior=$Behavior
    }
}

Function ESPIngest {
    param(
        [Parameter(ValueFromPipelineByPropertyName)][String]$Path
    )

    $Coll = [System.Collections.Generic.List[Object]]@()
    $Ingest = Import-Csv -Path $Path -UseCulture
    $Ingest | ForEach-Object {
        $Obj = $_ | ESPInstaller
        $Coll.Add($Obj)
        $Obj = $null
    }

    return $Coll
}

Function ESPLocalize {
    param(
        [Parameter(ValueFromPipeline,Mandatory)][String]$CSVPath,
        [Parameter(Mandatory)][String]$OutputPath,
        [Parameter(ValueFromPipelineByPropertyName)][PSCredential]$Credential
        
    )

    if (!(Test-Path $OutputPath)) {New-Item -ItemType Directory -Path $OutputPath}
    
    $Ingest = ESPIngest -Path $CSVPath
    $Ingest | ForEach-Object {
        if ($Credential) {
            New-PSDrive -PSProvider FileSystem -Name FileCopy -Root $_.SourcePath -Credential $Credential
            Copy-Item FileCopy:\ $OutputPath -Recurse -Container
            Remove-PSDrive -Name FileCopy
        }
        else {Copy-Item $_.SourcePath $OutputPath -Recurse -Container}
    }
    Set-Variable -Name "ESPCondenserPath" -Value $OutputPath -Scope Global

}

Function ESPCondense {
    param(
        [Parameter(ValueFromPipeline,Mandatory)][String]$CSVPath
    )
    $Ingest = ESPIngest -Path $CSVPath
    $Ingest | ForEach-Object {
        $Install = $_ | ESPInstallerType
        $InstallString = $InstallString + $Install
        $Install = $Null
    }

    $AppendStatement = @'
Write-Output 'Installed'
"Installed" | Set-Content C:\Temp\APComplete.txt
'@
    $InstallString = $InstallString + $AppendStatement
    $InstallString | Set-Content $ESPCondenserPath\Install.ps1
}

Function ESPInstallerType {
    param(
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][ValidateSet("Script","MSI","EXE")]$Type,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$Title,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Version,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$SourcePath,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][String]$InstallFile,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Arguments,
        [Parameter(ValueFromPipelineByPropertyName)][String]$Validation,
        [Parameter(ValueFromPipelineByPropertyName,Mandatory)][ValidateSet('Continue','Stop')]$Behavior
    )

    $SourcePath = $SourcePath -replace "^(.*[\\\/])",""
    Switch($Type) {
        "MSI"       {$Process = "C:\Windows\System32\msiexec.exe"; 
                    $Arguments = @('/i', ("```"`$(`$PSScriptRoot)\" + "$SourcePath\$InstallFile" + '`" ') , $Arguments ) }
        "EXE"       {$Process = "`$(`$PSScriptRoot)\$SourcePath\$InstallFile" }
        "Script"    {$Process = "powershell.exe";
                    $Arguments = '-ExecutionPolicy Bypass -NoLogo -NoProfile -File `"$($PSScriptRoot)\' + "$SourcePath\$InstallFile" + '`" ' + $Arguments }
    }
    
$OutputStr = @"
###$($Title)
###$($Version)
`$Arguments = "$Arguments"
`$ProcessPath = "$Process"
#`$WorkingDir = "`$(`$PSScriptRoot)\$SourcePath"
#`$Process = & "`$ProcessPath `$Arguments" | Out-File C:\Windows\Temp\APInstaller.txt -Append
`$Process = Start-Process `$ProcessPath -ArgumentList `$Arguments -Wait -PassThru
#do {Start-Sleep -s 1} until (`$(`$Process.HasExited) -eq 'True')
"`$(Get-Date -UFormat '%m/%d/%Y %R') : $($Title): Exit Code: `$(`$Process.ExitCode)" | Add-Content C:\Temp\APInstaller.txt
#"ProcessPath: `$ProcessPath" | Add-Content C:\Temp\APInstaller.txt
if (`$Process.ExitCode -ne 0 -and `$Process.ExitCode -ne 1707){
    if ("$Behavior" -eq "Stop") {
        Exit 1
    }
`$Process = `$null
`$Arguments = `$null
}

"@

Return $OutputStr
}
